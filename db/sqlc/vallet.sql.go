// Code generated by sqlc. DO NOT EDIT.
// source: vallet.sql

package db

import (
	"context"
)

const createVallet = `-- name: CreateVallet :one
INSERT INTO vallet (
  balance
) VALUES (
  $1
) RETURNING vallet_id, balance, created_at
`

func (q *Queries) CreateVallet(ctx context.Context, balance int64) (Vallet, error) {
	row := q.db.QueryRowContext(ctx, createVallet, balance)
	var i Vallet
	err := row.Scan(&i.ValletID, &i.Balance, &i.CreatedAt)
	return i, err
}

const getVallet = `-- name: GetVallet :one
SELECT vallet_id, balance, created_at FROM vallet
WHERE vallet_id = $1 LIMIT 1
`

func (q *Queries) GetVallet(ctx context.Context, valletID int64) (Vallet, error) {
	row := q.db.QueryRowContext(ctx, getVallet, valletID)
	var i Vallet
	err := row.Scan(&i.ValletID, &i.Balance, &i.CreatedAt)
	return i, err
}

const updateValletBalance = `-- name: UpdateValletBalance :one
UPDATE vallet
SET balance = balance + $1
WHERE vallet_id = $2
RETURNING vallet_id, balance, created_at
`

type UpdateValletBalanceParams struct {
	Amount   int64 `json:"amount"`
	ValletID int64 `json:"vallet_id"`
}

func (q *Queries) UpdateValletBalance(ctx context.Context, arg UpdateValletBalanceParams) (Vallet, error) {
	row := q.db.QueryRowContext(ctx, updateValletBalance, arg.Amount, arg.ValletID)
	var i Vallet
	err := row.Scan(&i.ValletID, &i.Balance, &i.CreatedAt)
	return i, err
}
