// Code generated by sqlc. DO NOT EDIT.
// source: wallet.sql

package db

import (
	"context"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallet (
  balance
) VALUES (
  $1
) RETURNING wallet_id, balance, created_at
`

func (q *Queries) CreateWallet(ctx context.Context, balance int64) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet, balance)
	var i Wallet
	err := row.Scan(&i.WalletID, &i.Balance, &i.CreatedAt)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT wallet_id, balance, created_at FROM wallet
WHERE wallet_id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, walletID int64) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, walletID)
	var i Wallet
	err := row.Scan(&i.WalletID, &i.Balance, &i.CreatedAt)
	return i, err
}

const updateWalletBalance = `-- name: UpdateWalletBalance :one
UPDATE wallet
SET balance = balance + $1
WHERE wallet_id = $2
RETURNING wallet_id, balance, created_at
`

type UpdateWalletBalanceParams struct {
	Amount   int64 `json:"amount"`
	WalletID int64 `json:"wallet_id"`
}

func (q *Queries) UpdateWalletBalance(ctx context.Context, arg UpdateWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, updateWalletBalance, arg.Amount, arg.WalletID)
	var i Wallet
	err := row.Scan(&i.WalletID, &i.Balance, &i.CreatedAt)
	return i, err
}
